{"version":3,"sources":["components/TablePassEncrypted.js","Header.js","components/FormPassword.js","home.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["TablePassEncrypted","encryptKey","hashPassword","hash","password","props","passToEncrypt","length","crypto","createHash","update","digest","encryptPassword","algorithm","cipher","createCipher","crypted","final","encodeBase64","Buffer","from","toString","decodeBase64","data","uuencodePassword","uuencode","encode","hover","bordered","style","width","scope","this","Component","defaultProps","Header","className","Provider","value","color","size","Nav","href","FormPassword","Form","FormGroup","row","Label","for","sm","InputGroup","Input","type","name","id","placeholder","onChange","e","setPassToEncrypt","target","InputGroupAddon","addonType","Button","Pluralize","Home","Container","Row","Col","span","offset","Footer","App","state","handleChangePassToEncrypt","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.320cee44.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Table } from 'reactstrap';\nimport crypto from 'crypto';\nimport uuencode from 'uuencode';\n\nclass TablePassEncrypted extends Component {\n\n  encryptKey = 'Passcrypt';\n\n  hashPassword = (hash) => {\n    const password = this.props.passToEncrypt;\n    if (password.length > 0) {\n      return crypto.createHash(hash).update(password).digest(\"hex\");\n    }\n    return '';\n  };\n\n  encryptPassword = (algorithm) => {\n    const password = this.props.passToEncrypt;\n    if (password.length > 0) {\n      let cipher = crypto.createCipher(algorithm, this.encryptKey);\n      let crypted = cipher.update(password,'utf8','hex');\n      crypted += cipher.final('hex');\n      return crypted;\n    }\n    return '';\n  };\n\n  encodeBase64 = () => {\n    const password = this.props.passToEncrypt;\n    if (password.length > 0) {\n      return Buffer.from(password).toString('base64')\n    }\n    return '';\n  };\n\n  decodeBase64 = (data) => {\n    return Buffer.from(data, 'base64').toString('ascii');\n  };\n\n  uuencodePassword = () => {\n    const password = this.props.passToEncrypt;\n    if (password.length > 0) {\n      return uuencode.encode(password);\n    }\n    return '';\n  };\n\n  render() {\n    return(\n      <Table hover bordered>\n        <thead>\n          <tr>\n            <th style={{width: '20%'}}>Method</th>\n            <th style={{width: '80%'}}>Encrypted</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th scope=\"row\">Clear password</th>\n            <td>{this.props.passToEncrypt}</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">Standard Des</th>\n            <td>{this.encryptPassword('des')}</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">Md5</th>\n            <td>{this.hashPassword('md5')}</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">Sha 1</th>\n            <td>{this.hashPassword('sha1')}</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">Sha 256</th>\n            <td>{this.hashPassword('sha256')}</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">uuencode</th>\n            <td>{this.uuencodePassword()}</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">Base 64</th>\n            <td>{this.encodeBase64()}</td>\n          </tr>\n        </tbody>\n      </Table>\n    );\n  }\n}\n\nTablePassEncrypted.defaultProps = {\n  passToEncrypt: \"test\"\n};\n\nexport default TablePassEncrypted;","import React from 'react';\nimport { Nav } from 'react-bootstrap';\nimport GithubCorner from 'react-github-corner';\nimport { IconContext } from \"react-icons\";\nimport { MdHttps } from 'react-icons/md'\n\nconst Header = () => {\n  return (\n    <div className=\"d-flex flex-column flex-md-row align-items-center p-4 px-md-4 mb-3 bg-dark text-white border-bottom shadow-sm \">\n      <IconContext.Provider value={{ color: \"white\", size: \"35px\" }}>\n        <MdHttps />\n      </IconContext.Provider>\n      <h3 className=\"ml-3 my-0 mr-md-auto font-weight-normal\" > Passcrypt </h3>\n      { /*<Header/>*/ }\n      <Nav className=\"mr-lg-5 my-2 my-md-0\">\n        <a className=\"text-white\" href=\"https://github.com/gcaggia/passcrypt\">Fork me on Github</a>\n        <GithubCorner href=\"https://github.com/gcaggia/passcrypt\" />\n      </Nav>\n    </div>\n  );\n};\n\nexport default Header;","import React from 'react';\nimport {Form, FormGroup, Label, Col, Input, Button, InputGroupAddon, InputGroup } from 'reactstrap';\nimport Pluralize from 'pluralize';\n\nconst FormPassword = (props) => {\n\n  return (\n    <Form className=\"mt-5\">\n      <FormGroup row>\n        <Label for=\"inputPassword\" sm={3} className=\"font-weight-bold\">Enter a password</Label>\n        <Col sm={9}>\n          <InputGroup>\n            <Input\n              type=\"text\"\n              name=\"password\"\n              id=\"inputPassword\"\n              placeholder=\"Enter Password you want to encrypt\"\n              value={props.passToEncrypt}\n              onChange={(e) => props.setPassToEncrypt(e.target.value)}\n            />\n            <InputGroupAddon addonType=\"append\">\n              <Button color=\"secondary\">\n                { props.passToEncrypt.length + ' ' + Pluralize('character', props.passToEncrypt.length || 1) }\n              </Button>\n            </InputGroupAddon>\n          </InputGroup>\n        </Col>\n      </FormGroup>\n    </Form>\n  );\n};\n\nexport default FormPassword;","import React              from 'react';\nimport Container          from 'react-bootstrap/Container';\nimport Row                from 'react-bootstrap/Row';\nimport Col                from 'react-bootstrap/Col';\nimport FormPassword       from './components/FormPassword';\nimport TablePassEncrypted from './components/TablePassEncrypted';\n\nconst Home = (props) => {\n  return (\n    <Container className=\"mt-5\">\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <Row>\n            <Col sm={{ span: 10, offset: 1 }}>\n              <p className=\"lead text-center text-info\">Use this application to encrypt a password and see\n                the results with different encryption algorithms.\n              </p>\n              <FormPassword\n                passToEncrypt={props.passToEncrypt}\n                setPassToEncrypt={props.setPassToEncrypt}\n              />\n            </Col>\n          </Row>\n        </div>\n        <div className=\"m-5\">\n          <h3 className=\"text-muted\">Results</h3>\n          <hr/>\n          <TablePassEncrypted\n            passToEncrypt={props.passToEncrypt}\n          />\n        </div>\n      </div>\n    </Container>\n  );\n};\n\nexport default Home;","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className=\"sticky-footer \">\n      <div className=\"container mt-5 p-5\">\n        <div className=\"p-2\">\n          <span>Guillaume | </span>\n          <a href=\"http://codÃ©.com/\">codÃ©.com</a>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport Header               from './Header';\nimport Home                 from './home';\nimport Footer               from './Footer';\n\nclass App extends Component {\n\n  state = {\n    passToEncrypt: ''\n  };\n\n  handleChangePassToEncrypt = (value) => {\n    this.setState({\n      passToEncrypt: value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <Home\n          passToEncrypt={this.state.passToEncrypt}\n          setPassToEncrypt={this.handleChangePassToEncrypt}\n        />\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}